generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @default("Unknown")
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  currency                String?   @default("EUR")
  yearlyIncome            Float?
  yearlyExpenditure       Float?
  yearlyInvestment        Float?
  safeWithdrawalRate      Float?
  birthDate               DateTime?
  retirementAge           Int?
  pensionAccessibilityAge Int?

  // opposite relations
  accounts      Account[]
  sessions      Session[]
  // custom
  transactions  Transaction[]
  moneyAccounts MoneyAccount[]
  categories    Category[]
}

model Category {
  id     String  @id @default(cuid())
  name   String
  color  String?
  icon   String?
  userId String?

  user User? @relation(fields: [userId], references: [id])

  transactions Transaction[]

  @@unique([userId, name])
}

enum TransactionType {
  Income
  Expense
  Transfer
}

model Transaction {
  id            String          @id @default(cuid())
  type          TransactionType
  name          String
  description   String?
  amount        Float
  date          DateTime        @default(now())
  userId        String
  categoryId    String?
  fromAccountId String?
  toAccountId   String?

  user        User         @relation(fields: [userId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  fromAccount CashAccount? @relation("paymentFromAccount", fields: [fromAccountId], references: [id], onDelete: Restrict)
  toAccount   CashAccount? @relation("paymentToAccount", fields: [toAccountId], references: [id], onDelete: Restrict)

  @@index([toAccountId])
  @@index([fromAccountId])
  @@index([categoryId])
  @@index([userId])
}

model MoneyAccount {
  id        String   @id @default(cuid())
  name      String
  userId    String
  color     String?
  icon      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  CashAccount       CashAccount?
  InvestmentAccount InvestmentAccount?

  @@unique([name, userId])
  @@index([userId])
}

enum CashAccountType {
  Cash
  Savings
}

model CashAccount {
  id        String @id @default(cuid())
  accountId String @unique

  account MoneyAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  paymentFromAccount Transaction[] @relation("paymentFromAccount")
  paymentToAccount   Transaction[] @relation("paymentToAccount")
}

enum InvestmentType {
  Stocks
  Crypto
  Property
  Other
}

model InvestmentAccount {
  id                   String         @id @default(cuid())
  accountId            String         @unique
  expectedRateOfReturn Float
  type                 InvestmentType
  description          String?        @db.Text

  account MoneyAccount      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  entries InvestmentEntry[]
}

model InvestmentEntry {
  id                  String   @id @default(cuid())
  investmentAccountId String
  date                DateTime
  balance             Float

  account InvestmentAccount @relation(fields: [investmentAccountId], references: [id], onDelete: Cascade)

  @@index([investmentAccountId])
}
