generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
}

model Category {
  id     String  @id @default(cuid())
  name   String
  color  String?
  icon   String?
  userId String?

  user User? @relation(fields: [userId], references: [id])

  transactions Transaction[]

  @@unique([userId, name])
}

enum TransactionType {
  Income
  Expense
  Transfer
}

model Transaction {
  id            String          @id @default(cuid())
  type          TransactionType
  name          String
  description   String?
  amount        Float
  currency      String?         @default("EUR")
  date          DateTime        @default(now())
  userId        String
  categoryId    String?
  fromAccountId String?
  toAccountId   String?

  user        User         @relation(fields: [userId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  fromAccount CashAccount? @relation("paymentFromAccount", fields: [fromAccountId], references: [id], onDelete: Restrict)
  toAccount   CashAccount? @relation("paymentToAccount", fields: [toAccountId], references: [id], onDelete: Restrict)
}

model Account {
  id     String  @id @default(cuid())
  name   String
  userId String
  color  String?
  icon   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  CashAccount       CashAccount?
  InvestmentAccount InvestmentAccount?
  AccountTimechart  AccountTimechart[]

  @@unique([name, userId])
}

enum CashAccountType {
  Cash
  Savings
}

model CashAccount {
  id        String @id @default(cuid())
  accountId String @unique

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  paymentFromAccount Transaction[] @relation("paymentFromAccount")
  paymentToAccount   Transaction[] @relation("paymentToAccount")
}

enum InvestmentType {
  Stock
  Bond
  ETF
  Crypto
  RealEstate
  Other
}

model InvestmentAccount {
  id                   String         @id @default(cuid())
  accountId            String         @unique
  expectedRateOfReturn Float?
  type                 InvestmentType

  account Account @relation(fields: [accountId], references: [id])
}

model AccountTimechart {
  accountId String
  total     Float
  date      DateTime

  account Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, date])
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())

  transactions Transaction[]
  accounts     Account[]
  categories   Category[]
}
