generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
}

enum LedgerEntryType {
  Income
  Expense
  Transfer
}

model LedgerCategory {
  id     String  @id @default(cuid())
  name   String
  color  String?
  icon   String?
  userId String?

  user User? @relation(fields: [userId], references: [id])

  ledger Ledger[]

  @@unique([userId, name])
}

model Ledger {
  id            String          @id @default(cuid())
  type          LedgerEntryType
  name          String
  description   String
  amount        Float
  currency      String?         @default("EUR")
  date          DateTime        @default(now())
  userId        String
  categoryId    String
  fromAccountId String?
  toAccountId   String?

  user        User           @relation(fields: [userId], references: [id])
  category    LedgerCategory @relation(fields: [categoryId], references: [id])
  fromAccount CashAccount?   @relation("paymentFromAccount", fields: [fromAccountId], references: [id])
  toAccount   CashAccount?   @relation("paymentToAccount", fields: [toAccountId], references: [id])
}

model Account {
  id     String  @id @default(cuid())
  name   String
  userId String
  color  String?
  icon   String?

  user User @relation(fields: [userId], references: [id])

  CashAccount       CashAccount?
  InvestmentAccount InvestmentAccount?

  @@unique([name, userId])
}

enum CashAccountType {
  Cash
  Savings
}

model CashAccount {
  id        String @id @default(cuid())
  accountId String @unique

  account Account @relation(fields: [accountId], references: [id])

  paymentFromAccount Ledger[] @relation("paymentFromAccount")
  paymentToAccount   Ledger[] @relation("paymentToAccount")
}

enum InvestmentType {
  Stock
  Bond
  ETF
  Crypto
  RealEstate
  Other
}

model InvestmentAccount {
  id                   String         @id @default(cuid())
  accountId            String         @unique
  expectedRateOfReturn Float?
  type                 InvestmentType

  account Account @relation(fields: [accountId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())

  ledger         Ledger[]
  accounts       Account[]
  LedgerCategory LedgerCategory[]
}
